#include <GL/glut.h>
#include <iostream>
#include <cmath>

using namespace std;

// Global variables for the coordinates
int x1, startY, x2, endY;

// Function to draw a pixel at (x, y) with a specified color
void drawPixel(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

// Bresenham Line Drawing Algorithm
void drawLine(int x1, int startY, int x2, int endY) {
    int dx = abs(x2 - x1); // Absolute difference in x
    int dy = abs(endY - startY); // Absolute difference in y
    int sx = (x2 > x1) ? 1 : -1; // Step for x (left or right)
    int sy = (endY > startY) ? 1 : -1; // Step for y (up or down)

    // Decision variable
    int g;

    int x = x1, y = startY;
// For slope |m| <= 1
    if (dx >= dy) {
        g = 2 * dy - dx; // Initial decision variable
        while (x != x2) {
            drawPixel(x, y); // Draw the current pixel
            if (g >= 0) { // If decision variable is positive
                y += sy; // Move diagonally
                g -= 2 * dx;
            }
            x += sx; // Move horizontally
            g += 2 * dy;
        }
    }
    // For slope |m| > 1
    else {
        g = 2 * dx - dy; // Initial decision variable
        while (y != endY) {
            drawPixel(x, y); // Draw the current pixel
            if (g >= 0) { // If decision variable is positive
                x += sx; // Move diagonally
                g -= 2 * dy;
            }
            y += sy; // Move vertically
            g += 2 * dx;
        }
    }
}
// OpenGL display function
void display() {
    glClear(GL_COLOR_BUFFER_BIT); // Clear the screen

    // Debugging: Output the coordinates
    cout << "Drawing line from (" << x1 << ", " << startY << ") to (" << x2 << ", " << endY << ")" << endl;

    // Draw the line using Bresenham's Algorithm
    drawLine(x1, startY, x2, endY);

    glFlush(); // Ensure all OpenGL commands are executed
}

// OpenGL initialization function
void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0); // Set the background color to black
    glColor3f(1.0, 1.0, 1.0);         // Set the drawing color to white
    glPointSize(4.0);                 // Increase point size to make it visible
    glOrtho(0.0, 500.0, 0.0, 500.0, -1.0, 1.0);  // Set the coordinate system (2D orthographic projection)
}

// Main function
int main(int argc, char** argv) {
    // Ask the user for input before opening the OpenGL window
    cout << "Enter the starting point (x1, startY): ";
    cin >> x1 >> startY;
    cout << "Enter the ending point (x2, endY): ";
    cin >> x2 >> endY;



// Check if the input coordinates are within the range of the window
    if (x1 < 0 || x1 > 500 || startY < 0 || startY > 500 || x2 < 0 || x2 > 500 || endY < 0 || endY > 500) {
        cout << "Error: Coordinates must be between 0 and 500." << endl;
        return 1;  // Exit the program if coordinates are out of range
    }

    // Initialize GLUT and create the window
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bresenham Line Drawing Algorithm");

    // Initialize OpenGL settings
    init();

    // Set up the display function
    glutDisplayFunc(display);

    // Enter the GLUT event processing loop
    glutMainLoop();

    return 0;
}
