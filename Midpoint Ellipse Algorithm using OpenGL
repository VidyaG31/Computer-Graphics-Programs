#include <GL/glut.h>
#include <iostream>

using namespace std;

// Global variables for ellipse parameters
int xc, yc, rx, ry;

// Function to draw a pixel at (x, y)
void drawPixel(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

// Function to plot the symmetric points of the ellipse
void plotEllipsePoints(int x, int y) {
    drawPixel(xc + x, yc + y);
    drawPixel(xc - x, yc + y);
    drawPixel(xc + x, yc - y);
    drawPixel(xc - x, yc - y);
}

// Midpoint Ellipse Drawing Algorithm
void drawEllipse() {
    float dx, dy, d1, d2;
    int x = 0, y = ry;

    // Initial decision parameter for Region 1
    d1 = (ry * ry) - (rx * rx * ry) + (0.25 * rx * rx);
    dx = 2 * ry * ry * x;
    dy = 2 * rx * rx * y;

    // Region 1
    while (dx < dy) {
        plotEllipsePoints(x, y);
        if (d1 < 0) {
            x++;
            dx += 2 * ry * ry;
            d1 += dx + (ry * ry);
        } else {
            x++;
            y--;
            dx += 2 * ry * ry;
            dy -= 2 * rx * rx;
            d1 += dx - dy + (ry * ry);
        }
        plotEllipsePoints(x, y);
    }

    // Initial decision parameter for Region 2
    d2 = ((ry * ry) * ((x + 0.5) * (x + 0.5))) + ((rx * rx) * ((y - 1) * (y - 1))) - (rx * rx * ry * ry);

    // Region 2
    while (y >= 0) {
        plotEllipsePoints(x, y);
        if (d2 > 0) {
            y--;
            dy -= 2 * rx * rx;
            d2 += (rx * rx) - dy;
        } else {
            y--;
            x++;
            dx += 2 * ry * ry;
            dy -= 2 * rx * rx;
            d2 += dx - dy + (rx * rx);
        }
        plotEllipsePoints(x, y);
    }
    glFlush();
}

// OpenGL display function
void display() {
    glClear(GL_COLOR_BUFFER_BIT); // Clear the screen
    drawEllipse(); // Call the Midpoint Ellipse drawing function
}

// OpenGL initialization function
void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0); // Set background color to black
    glColor3f(1.0, 1.0, 1.0); // Set drawing color to white
    glPointSize(2.0); // Increase point size for better visibility
    glOrtho(0.0, 500.0, 0.0, 500.0, -1.0, 1.0);  // Set coordinate system (2D)
}

// Main function
int main(int argc, char** argv) {
    // Get user input for the ellipse center and radii
    cout << "Enter the center of the ellipse (xc, yc): ";
    cin >> xc >> yc;
    cout << "Enter the x-radius and y-radius of the ellipse (rx, ry): ";
    cin >> rx >> ry;

    // Check if the input coordinates are within the valid range
    if (xc < 0 || xc > 500 || yc < 0 || yc > 500 || rx <= 0 || ry <= 0 || rx > 250 || ry > 250) {
        cout << "Error: Coordinates must be between 0 and 500, and radii must be positive and within range." << endl;
        return 1;
    }

    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Midpoint Ellipse Drawing Algorithm");

    init(); // Initialize OpenGL settings
    glutDisplayFunc(display); // Set up the display function
    glutMainLoop(); // Enter the main event loop

    return 0;
}
