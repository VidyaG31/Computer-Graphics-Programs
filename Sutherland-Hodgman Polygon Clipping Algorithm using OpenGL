#include <GL/glut.h>
#include <stdio.h>

#define MAX_POINTS 100

typedef struct {
    float x, y;
} Point;

Point polygon[MAX_POINTS];
Point clippedPolygon[MAX_POINTS];
int polySize = 0;
int clipSize = 0;
int xmin, ymin, xmax, ymax;
int polygonDrawn = 0;
int clippingWindowDefined = 0;

void drawLine(float x1, float y1, float x2, float y2) {
    glBegin(GL_LINES);
    glVertex2f(x1, y1);
    glVertex2f(x2, y2);
    glEnd();
}

void drawPolygon(Point poly[], int size, float r, float g, float b) {
    glColor3f(r, g, b);
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < size; i++) {
        glVertex2f(poly[i].x, poly[i].y);
    }
    glEnd();
}

int inside(Point p, int edge) {
    switch (edge) {
        case 0: return p.x >= xmin;
        case 1: return p.x <= xmax;
        case 2: return p.y >= ymin;
        case 3: return p.y <= ymax;
        default: return 0;
    }
}

Point intersect(Point p1, Point p2, int edge) {
    float x, y;
    if (edge == 0 || edge == 1) {
        x = (edge == 0) ? xmin : xmax;
        y = p1.y + (p2.y - p1.y) * (x - p1.x) / (p2.x - p1.x);
    } else {
        y = (edge == 2) ? ymin : ymax;
        x = p1.x + (p2.x - p1.x) * (y - p1.y) / (p2.y - p1.y);
    }
    Point p = {x, y};
    return p;
}

void clipPolygon(Point input[], int inSize, int edge) {
    Point output[MAX_POINTS];
    int outSize = 0;
    for (int i = 0; i < inSize; i++) {
        Point current = input[i];
        Point prev = input[(i - 1 + inSize) % inSize];
        int currInside = inside(current, edge);
        int prevInside = inside(prev, edge);

        if (currInside && prevInside) {
            output[outSize++] = current;
        } else if (!currInside && prevInside) {
            output[outSize++] = intersect(prev, current, edge);
        } else if (currInside && !prevInside) {
            output[outSize++] = intersect(prev, current, edge);
            output[outSize++] = current;
        }
    }
    clipSize = outSize;
    for (int i = 0; i < outSize; i++) {
        clippedPolygon[i] = output[i];
    }
}

void clip() {
    clipSize = polySize;
    for (int i = 0; i < polySize; i++) {
        clippedPolygon[i] = polygon[i];
    }
    for (int edge = 0; edge < 4; edge++) {
        clipPolygon(clippedPolygon, clipSize, edge);
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    if (!clippingWindowDefined && polygonDrawn) {
        drawPolygon(polygon, polySize, 1, 0, 0); // Red polygon
    }

    if (clippingWindowDefined) {
        glColor3f(0, 0, 1); // Blue clipping window
        drawLine(xmin, ymin, xmax, ymin);
        drawLine(xmax, ymin, xmax, ymax);
        drawLine(xmax, ymax, xmin, ymax);
        drawLine(xmin, ymax, xmin, ymin);

        drawPolygon(clippedPolygon, clipSize, 1, 0, 0); // Green clipped polygon
    }

    glFlush();
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        if (!clippingWindowDefined && polySize < MAX_POINTS) {
            polygon[polySize].x = (float)x;
            polygon[polySize].y = (float)(500 - y);
            polySize++;
            polygonDrawn = 1;
            glutPostRedisplay();
        }
    } else if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN) {
        if (polySize > 0 && !clippingWindowDefined) {
            printf("Enter clipping window (xmin ymin xmax ymax): ");
            scanf("%d %d %d %d", &xmin, &ymin, &xmax, &ymax);
            clippingWindowDefined = 1;
            clip();
            glutPostRedisplay();
        }
    }
}

void init() {
    glClearColor(1, 1, 1, 1);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0, 500, 0, 500, -1, 1);
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Polygon Clipping in C");
    init();
    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutMainLoop();
    return 0;
}
