#include <GL/glut.h>
#include <iostream>

using namespace std;

// Global variables for circle parameters
int xc, yc, r;

// Function to draw a pixel at (x, y)
void drawPixel(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

// Function to plot the symmetric points of the circle
void plotCirclePoints(int x, int y) {
    drawPixel(xc + x, yc + y);
    drawPixel(xc - x, yc + y);
    drawPixel(xc + x, yc - y);
    drawPixel(xc - x, yc - y);
    drawPixel(xc + y, yc + x);
    drawPixel(xc - y, yc + x);
    drawPixel(xc + y, yc - x);
    drawPixel(xc - y, yc - x);
}

// Bresenham's Circle Drawing Algorithm
void drawCircle() {
    int x = 0, y = r;
    int d = 3 - 2 * r;  // Initial decision parameter

    while (x <= y) {
        plotCirclePoints(x, y);
        x++;

        if (d <= 0) {
            d = d + 4 * x + 6;
        } else {
            y--;
            d = d + 4 * (x - y) + 10;
        }
        plotCirclePoints(x, y);
    }
    glFlush();
}

// OpenGL display function
void display() {
    glClear(GL_COLOR_BUFFER_BIT); // Clear the screen
    drawCircle(); // Call the Bresenham circle drawing function
}

// OpenGL initialization function
void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0); // Set background color to black
    glColor3f(1.0, 1.0, 1.0); // Set drawing color to white
    glPointSize(2.0); // Increase point size for better visibility
    glOrtho(0.0, 500.0, 0.0, 500.0, -1.0, 1.0);  // Set coordinate system (2D)
}

// Main function
int main(int argc, char** argv) {
    // Get user input for the circle center and radius
    cout << "Enter the center of the circle (xc, yc): ";
    cin >> xc >> yc;
    cout << "Enter the radius of the circle: ";
    cin >> r;

    // Check if the input coordinates are within the valid range
    if (xc < 0 || xc > 500 || yc < 0 || yc > 500 || r <= 0 || r > 250) {
        cout << "Error: Coordinates must be between 0 and 500, and radius must be positive and within range." << endl;
        return 1;
    }

    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Bresenham Circle Drawing Algorithm");

    init(); // Initialize OpenGL settings
    glutDisplayFunc(display); // Set up the display function
    glutMainLoop(); // Enter the main event loop

    return 0;
}
